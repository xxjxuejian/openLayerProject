<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>动画效果控件</title>
    <!--导入本页面外部样式表-->
    <link href="../../css/style.css" rel="stylesheet" type="text/css" />
    <link href="../../css/ol.css" rel="stylesheet" type="text/css" />
    <script src="../../libs/ol5/ol.js" type="text/javascript"></script>
</head>
<body>
    <div class="ToolLib">
        <button class="ButtonLib" id="spin">旋转定位到沈阳</button>
        <button class="ButtonLib" id="elastic">弹性定位到北京</button>
        <button class="ButtonLib" id="bounce">反弹定位到上海</button>
        <button class="ButtonLib" id="rotate">围绕武汉旋转</button>
        <button class="ButtonLib" id="fly">飞行定位到广州</button>
    </div>
    <div id="mapCon">
    </div>
    <script type="text/javascript">
        //实例化地图视图对象
        var view = new ol.View({
            //地图初始中心点
            center: [12950000, 4860000],
            //地图初始显示级别
            zoom: 11
        });
        //实例化Map对象加载地图
        var map = new ol.Map({
            //地图容器div的ID
            target: 'mapCon',
            //地图容器中加载的图层
            layers: [
                //加载瓦片图层数据
                new ol.layer.Tile({
                    title: "天地图矢量图层",
                    source: new ol.source.XYZ({
                        url: "http://t0.tianditu.com/DataServer?T=vec_w&x={x}&y={y}&l={z}&tk=3bc6874f2b919aa581635abab7759a3f",
                        wrapX: false
                    })
                }),
                new ol.layer.Tile({
                    title: "天地图矢量图层注记",
                    source: new ol.source.XYZ({
                        url: "http://t0.tianditu.com/DataServer?T=cva_w&x={x}&y={y}&l={z}&tk=3bc6874f2b919aa581635abab7759a3f",
                        wrapX: false
                    })
                })
            ],
            //加载瓦片时开启动画效果
            loadTilesWhileAnimating: true,
            //地图视图设置
            view: view
        });
        //各定位点(中国省会城市)
        var shenyang = ol.proj.fromLonLat([123.24, 41.50]);
        var beijing = ol.proj.fromLonLat([116.28, 39.54]);
        var shanghai = ol.proj.fromLonLat([121.29, 31.14]);
        var wuhan = ol.proj.fromLonLat([114.21, 30.37]);
        var guangzhou = ol.proj.fromLonLat([113.15, 23.08]);
        var haikou = ol.proj.fromLonLat([110.20, 20.02]);
        // 获取反弹值
        function bounce(t) {
            var s = 7.5625, p = 2.75, l;
            if (t < (1 / p)) {
                l = s * t * t;
            } else {
                if (t < (2 / p)) {
                    t -= (1.5 / p);
                    l = s * t * t + 0.75;
                } else {
                    if (t < (2.5 / p)) {
                        t -= (2.25 / p);
                        l = s * t * t + 0.9375;
                    } else {
                        t -= (2.625 / p);
                        l = s * t * t + 0.984375;
                    }
                }
            }
            return l;
        }
        // 获取弹性伸缩值
        function elastic(t) {
            return Math.pow(2, -10 * t) * Math.sin((t - 0.075) * (2 * Math.PI) / 0.3) + 1;
        }
        //旋转定位
        document.getElementById('spin').onclick = function () {
            var center = view.getCenter();
            view.animate(
                 //第一个过程
                {
                    //动画结束时的视图中心,即当前视图中心同目标视图中心连线的中心点
                    center: [
                      center[0] + (shenyang[0] - shenyang[0]) / 2,
                      center[1] + (shenyang[1] - shenyang[1]) / 2
                    ],
                    rotation: Math.PI,//动画结束时的旋转角度，即180度
                    easing: ol.easing.easeIn//按每一帧动画控制的动画速度，即开始缓慢并逐渐加快速度
                },
            //第二个过程
            {
                center: shenyang,//动画结束时的视图中心
                rotation: 2 * Math.PI,//动画结束时的旋转角度，即360度回正
                easing: ol.easing.easeOut//按每一帧动画控制的动画速度，即开始快速并逐渐减速
            });
        };
        //弹性伸缩效果定位
        document.getElementById('elastic').onclick = function () {
            view.animate({
                center: beijing,///动画结束时的视图中心
                duration: 2000,//动画的持续时间（以毫秒为单位）
                easing: elastic//按每一帧动画控制的动画持续时间函数
            });
        };
        //反弹效果定位
        document.getElementById('bounce').onclick = function () {
            view.animate({
                center: shanghai,///动画结束时的视图中心
                duration: 2000,//动画的持续时间（以毫秒为单位）
                easing: bounce//按每一帧动画控制的动画持续时间函数
            });
        };
        //自旋效果定位
        document.getElementById('rotate').onclick = function () {
            var rotation = view.getRotation();
            view.animate(
                //第一个过程
                {
                    rotation: rotation + Math.PI,//第一次动画旋转角度
                    anchor: wuhan,//自旋的中心点，即武汉
                    easing: ol.easing.easeIn////按每一帧动画控制的动画速度，即开始缓慢并逐渐加快速度
                },
                //第二个过程
            {
                rotation: rotation + 2 * Math.PI,//动画结束时的旋转角度，即360度回正
                anchor: wuhan,// 旋转中心点
                easing: ol.easing.easeOut///按每一帧动画控制的动画速度，即开始快速并逐渐减速
            });
        };
        //飞行效果定位
        document.getElementById('fly').onclick = function () {
            var duration = 2000;//动画的持续时间（以毫秒为单位）
            var zoom = view.getZoom();
            var parts = 2;
            var called = false;
            //动画完成的回调函数
            function callback(complete) {
                --parts;
                if (called) {
                    return;
                }
                if (parts === 0 || !complete) {
                    called = true;
                    done(complete);
                }
            }
            //第一个动画
            view.animate({
                center: guangzhou,
                duration: duration
            }, callback);
            //第二个动画
            view.animate({
                zoom: zoom - 1,
                duration: duration / 2
            }, {
                zoom: zoom,
                duration: duration / 2
            }, callback);
        };
    </script>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>echarts统计图表</title>
    <meta charset="utf-8" />
    <link href="../../css/ol.css" rel="stylesheet" />
    <script src="../../libs/ol5/ol.js"></script>
    <script src="../../libs/jquery-1.11.2.min.js"></script>
    <script src="../../libs/echarts.common.min.js"></script>
    <style>
        #mapCon {
            position: relative;
            background: #f8f4f0;
            width: 100%;
            height: 100%;
        }

        #menu {
            padding: 10px;
            border-radius: 3px;
            overflow: hidden;
            width: 99%;
            height: auto;
            box-shadow: 0 0 2px 1px #949292;
            text-align: center;
            z-index: 2001;
            border-color: #66ccff;
            border-bottom: 1px solid #949292;
            margin-bottom: 2px;
        }

            #menu select {
                padding: 2px;
            }

        .axis path,
        .axis line {
            fill: rgb(128, 128, 128);
            stroke: black;
            shape-rendering: crispEdges;
        }

        .axis {
            font-size: 10px;
        }
    </style>
</head>
<body>
    <div id="menu">
        <label>统计图类型：&nbsp;</label>
        <select id="type">
            <option value="Column2D">2D柱状图</option>
            <option value="Line">折线图</option>
            <option value="Pie2D">2D饼图</option>
        </select>
        <button id="showCharts" class="btn" title="">加载统计图</button>
    </div>
    <div id="mapCon"> </div>
    <script>
        //实例化Map对象加载地图
        var map = new ol.Map({
            //地图容器div的ID
            target: 'mapCon',
            //地图容器中加载的图层
            layers: [
             new ol.layer.Tile({
                 title: "天地图矢量图层",
                 source: new ol.source.XYZ({
                     url: "http://t0.tianditu.com/DataServer?T=vec_w&x={x}&y={y}&l={z}&tk=3bc6874f2b919aa581635abab7759a3f",
                     wrapX: false
                 })
             }),
             new ol.layer.Tile({
                 title: "天地图矢量图层注记",
                 source: new ol.source.XYZ({
                     url: "http://t0.tianditu.com/DataServer?T=cva_w&x={x}&y={y}&l={z}&tk=3bc6874f2b919aa581635abab7759a3f",
                     wrapX: false
                 })
             })
            ],
            //地图视图设置
            view: new ol.View({
                //地图初始中心点
                center: ol.proj.fromLonLat([114, 32]),
                //地图初始显示级别
                zoom: 5
            })
        });
        //绘制热区的样式
        var flashStyle = new ol.style.Style({
            fill: new ol.style.Fill({
                color: 'rgba(0, 148, 255,0.2)'
            }),
            stroke: new ol.style.Stroke({
                color: '#cc3300',
                width: 3
            }),
            image: new ol.style.Circle({
                radius: 7,
                fill: new ol.style.Fill({
                    color: '#cc3300'
                })
            })
        });

        //矢量数据源
        var vectSource = new ol.source.Vector({});
        //矢量图层
        var vectLayer = new ol.layer.Vector({
            source: vectSource,
            style: flashStyle,
            opacity: 0.5
        });
        map.addLayer(vectLayer); //将矢量图层加载到地图容器中

        /**
        * 【加载统计图】功能按钮处理函数
        */
        document.getElementById('showCharts').onclick = function () {
            var overLayers = map.getOverlays(); //获取map中所有Overlays图层
            overLayers.clear(); //移除所有Overlays图层
            selectRegData(); //通过后台查询矢量要素显示并加载统计图
        };
        /**
        * 通过后台查询矢量要素
        */
        function selectRegData() {
            var opType = "select";  //查询数据
            var tableName = "GDPChartInfo";  //数据表名称
            $.ajax({
                url: 'RegDataHandler.ashx', //请求地址
                type: 'POST',  //请求方式为post
                data: { 'type': opType, 'table': tableName }, //传入参数
                dataType: 'json', //返回数据格式
                //请求成功完成后要执行的方法
                success: showRegCallBack,
                error: function (err) {
                    alert("执行失败");
                }
            });
        }
        /**
        * 查询请求回调函数
        * @param {json} data 查询返回的数据
        */
        function showRegCallBack(data) {
            vectSource.clear(); //清空矢量图层数据源
            var resultData = data; //查询结果json数组
            $.each(resultData, function (i, item) {
                //解析结果集中的几何字符串，并转换为多边形的几何数组
                var polyCoords = item.Geometry.split(";");
                var coordinates = new Array();
                coordinates[0] = new Array();
                for (var i = 0; i < polyCoords.length; i++) {
                    coordinates[0][i] = polyCoords[i].split(",");
                }
                //创建一个新的要素，并添加到数据源中
                var feature = new ol.Feature({
                    geometry: new ol.geom.Polygon(coordinates),
                    name: item.name,
                    id: item.ID
                });
                vectSource.addFeature(feature);
                //得到feature的外包矩形中心点
                var fGeometry = feature.getGeometry();
                var fExtent = fGeometry.getExtent();
                var centerX = fExtent[0] + (fExtent[2] - fExtent[0]) / 2;
                var centerY = fExtent[1] + (fExtent[3] - fExtent[1]) / 2;
                var center = [centerX, centerY]; //外包矩形中心点
                //为每个区域要素加载统计图
                addCharts(item, center);
            });
        }
        var mapContainer = document.getElementById('mapCon'); //地图容器对象
        var typeSelect = document.getElementById('type'); //统计图类型对象
        /**
        * 根据数据库中的数据加载统计图
        * @param {json} itemData 查询返回的每条记录数据
        * @param {ol.coordinate} coordinate 要素的几何外包矩形中心点
        */
        function addCharts(itemData, coordinate) {
            //新增div元素，用来承载统计图
            var elementDiv = document.createElement('div');
            elementDiv.id = "chart" + itemData.ID;
            elementDiv.className = "linechart";
            elementDiv.style.width = '200px';
            elementDiv.style.height = '200px';

            mapContainer.appendChild(elementDiv); // 为mapContainer添加div子节点

            //创建一个Overlay控件
            var newOverLayer = new ol.Overlay({
                element: elementDiv,
                autoPan: true,
                positioning: 'bottom-center'
            });
            newOverLayer.setPosition(coordinate);
            map.addOverlay(newOverLayer);
            //统计图类型
            var chartType = typeSelect.value;
            // 基于准备好的dom，初始化echarts图表
            var myChart = echarts.init(elementDiv);
            // 根据不同图表类型创建相应图表
            myChart.setOption(initChartOption(itemData, chartType));

        }

        function initChartOption(itemData, chartType) {
            var option = {};
            switch (chartType) {
                case "Column2D":
                    option = {
                        //设置标题
                        title: {
                            text: itemData.name + "近三年GDP",
                            x: 'left',
                            y: 'bottom'
                        },
                        //设置提示
                        tooltip: {
                            show: true
                        },
                        backgroundColor: 'rgba(128, 128, 128,0.5)',
                        //设置图例
                        legend: {
                            data: ["GDP(万亿)"]
                        },
                        //X轴信息
                        xAxis: [{
                            type: 'category',//默认为类目
                            data: ["2015", "2016", "2017"]
                        }],
                        //Y轴信息
                        yAxis: [
                            {
                                type: 'value'//默认为值类型
                            }
                        ],
                        //显示的值
                        series: [
                            {
                                "name": "GDP(万亿)",//图表类型
                                "type": "bar",//图表类型
                                "data": [+itemData.GDP_2015 / 10000, +itemData.GDP_2016 / 10000, +itemData.GDP_2017 / 10000]//图表数据
                            }
                        ]

                    };
                    break;
                case "Line":
                    option = {
                        //设置标题
                        title: {
                            text: itemData.name + "近三年GDP",
                            x: 'left',
                            y: 'bottom'
                        },
                        tooltip: {
                            show: true
                        },
                        backgroundColor: 'rgba(128, 128, 128,0.5)',
                        legend: {
                            data: ["GDP(万亿)"]
                        },
                        xAxis: {
                            type: 'category',
                            data: ["2015", "2016", "2017"]
                        },
                        yAxis: {
                            type: 'value'
                        },
                        series: [{
                            "name": "GDP(万亿)",
                            "data": [+itemData.GDP_2015 / 10000, +itemData.GDP_2016 / 10000, +itemData.GDP_2017 / 10000],
                            "type": 'line'
                        }]
                    };
                    break;
                case "Pie2D":
                    option = {
                        title: {
                            text: itemData.name + "GDP(万亿)",
                            x: 'right',
                            y: 'top'
                        },
                        tooltip: {
                            trigger: 'item',
                            formatter: "{a} <br/>{b} : {c} ({d}%)"
                        },
                        legend: {
                            orient: 'vertical',
                            left: 'left',
                            data: ['2015', '2016', '2017']
                        },
                        series: [
                            {
                                name: 'GDP',
                                type: 'pie',
                                radius: '55%',
                                center: ['50%', '60%'],
                                data: [
                                    { value: +itemData.GDP_2015 / 10000, name: '2015' },
                                    { value: +itemData.GDP_2016 / 10000, name: '2016' },
                                    { value: +itemData.GDP_2017 / 10000, name: '2017' }
                                ],
                                itemStyle: {
                                    emphasis: {
                                        shadowBlur: 10,
                                        shadowOffsetX: 0,
                                        shadowColor: 'rgba(0, 0, 0, 0.5)'
                                    }
                                }
                            }
                        ]
                    };
                    break;
                default:
                    break;
            }
            return option;
        }
    </script>
</body>
</html>

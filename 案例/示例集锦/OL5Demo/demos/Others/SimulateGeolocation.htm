<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>动态模拟导航轨迹示例</title>
    <meta charset="utf-8" />
    <link href="../../css/ol.css" rel="stylesheet" />    
    <script src="../../libs/ol5/ol.js"></script>
    <script src="../../libs/jquery-1.11.2.min.js"></script>
    <style>
        body {
            margin: 0px;
            width: 100%;
            height: 100%;
            overflow: hidden;
            position: absolute;
        }

        #container {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 24%;
            height: 22%;
            padding: 5px 10px;
            background-color: rgba(0,0,0,0.5);
            font-size: 14px;
            border-radius: 2px;
            z-index: 999;
        }

            #container p {
                color: rgb(255, 255, 255);
                line-height: 10px;
            }

            #container code {
                color: rgb(240, 244, 45);
                font: bold;
            }

        #mapCon {
            position: relative;
            background: #f8f4f0;
            width: 100%;
            height: 100%;
        }

        #menu {
            padding: 10px;
            border-radius: 3px;
            overflow: hidden;
            width: 100%;
            height: auto;
            box-shadow: 0 0 2px 1px #949292;
            text-align: center;
            z-index: 2001;
            border-color: #66ccff;
            border-bottom: 1px solid #949292;
            margin-bottom: 2px;
        }

        #info {
            color: rgba(255, 0, 0,0.5);
        }
    </style>
</head>
<body>
    <div id="menu">
        <label class="title" for="simulate">
            模拟导航演示：<input id="simulate" type="button" value="开始导航" />
        </label>
        <div id="info" class="alert alert-error" style="display: none;"></div>
    </div>
    <div id="mapCon">
        <div id="container">
            <p>位置点坐标（position）: <code id="position"></code></p>
            <p>位置精度（position accuracy）: <code id="positionaccuracy"></code></p>
            <p>当前方向（heading）: <code id="heading"></code></p>
            <p>当前速度（speed）: <code id="speed"></code></p>
            <p>采样周期（delta）: <code id="delta"></code></p>
        </div>
    </div>
    <img id="geolocation_marker" src="../../images/geolocation_marker_heading.png" />
    <script>
        var view = new ol.View({
            center: ol.proj.fromLonLat([5.8713, 45.6452]),
            zoom: 19
        });

        // 创建新地图
        var map = new ol.Map({
            layers: [
             new ol.layer.Tile({
                 title: "天地图矢量图层",
                 source: new ol.source.XYZ({
                     url: "http://t0.tianditu.com/DataServer?T=vec_w&x={x}&y={y}&l={z}&tk=3bc6874f2b919aa581635abab7759a3f",
                     wrapX: false
                 })
             }),
             new ol.layer.Tile({
                 title: "天地图矢量图层注记",
                 source: new ol.source.XYZ({
                     url: "http://t0.tianditu.com/DataServer?T=cva_w&x={x}&y={y}&l={z}&tk=3bc6874f2b919aa581635abab7759a3f",
                     wrapX: false
                 })
             })
            ],
            target: 'mapCon',
            view: view
        });

        // 用LineString存储轨迹点的地理信息（XYZM，Z维度用来存储角度/M则为时间维度）
        var positions = new ol.geom.LineString([],
            /** @type {ol.geom.GeometryLayout} */ ('XYZM'));

        // 创建导航定位控件（Geolocation Control）
        var geolocation = new ol.Geolocation(/** @type {olx.GeolocationOptions} */({
            projection: view.getProjection(), //投影坐标系
            trackingOptions: {//追踪参数
                maximumAge: 10000, //最大周期
                enableHighAccuracy: true, //启用高精度
                timeout: 600000  //超时
            }

        }));
        //创建导航定位标识的标注，添加到地图中
        var markerEl = document.getElementById('geolocation_marker');
        var marker = new ol.Overlay({
            positioning: 'center-center',
            element: markerEl,
            stopEvent: false
        });
        map.addOverlay(marker);

        // 模拟轨迹数据加载（本地的json格式数据）
        var simulationData;
        var client = new XMLHttpRequest();
        client.open('GET', '../../data/geolocation-orientation.json');
        client.onload = function () {
            simulationData = JSON.parse(client.responseText).data;
        };
        client.send();

        //导航功能按钮的单击事件，实现导航功能
        var simulateBtn = document.getElementById('simulate');
        simulateBtn.addEventListener('click', function () {
            if (simulationData == null || simulationData == undefined) {
                alert("未成功加载模拟数据！");
                return;
            }
            var coordinates = simulationData; //模拟轨迹点数组
            var first = coordinates.shift(); //删除数组第一个元素并返回第一个元素
            simulatePositionChange(first); //执行模拟位置变换功能
            var prevDate = first.timestamp; //默认第一个点位点的时间戳
            //定位功能函数
            function geolocate() {
                var position = coordinates.shift();//删除数组第一个元素并返回第一个元素
                if (!position) {
                    simulateBtn.disabled = ''; //开启功能按钮
                    return;
                }
                var newDate = position.timestamp; //当前定位点时间戳
                simulatePositionChange(position); //执行模拟位置变换功能
                //创建一个定时器，每隔一定时间执行定位功能函数
                window.setTimeout(function () {
                    prevDate = newDate;
                    geolocate();
                }, (newDate - prevDate) / 0.5);
            }

            geolocate(); //执行定位功能
            map.on('postcompose', render); //为地图容器添加postcompose事件监听
            map.render(); //渲染地图
            simulateBtn.disabled = 'disabled'; //禁用功能按钮
        }, false);
        //模拟位置变换功能函数
        function simulatePositionChange(position) {
            var coords = position.coords;//定位点坐标
            geolocation.set('accuracy', coords.accuracy); //设置位置精度
            geolocation.set('heading', degToRad(coords.heading));//设置当前航向值
            var position_ = [coords.longitude, coords.latitude];
            var projectedPosition = ol.proj.transform(position_, 'EPSG:4326',
                'EPSG:3857');
            geolocation.set('position', projectedPosition);//设置定位点坐标
            geolocation.set('speed', coords.speed); //设置当前速度
            geolocation.changed();
        }
        // 地图的postcompose 事件回调函数
        function render() {
            map.render();//渲染地图
        }

        var deltaMean = 500; // 地理位置变化采样周期（MS）
        // 定位控件信息变化监听事件（添加定位点并更新轨迹面板信息）
        geolocation.on('change', function (evt) {
            var position = geolocation.getPosition(); //获取定位点
            var accuracy = geolocation.getAccuracy(); //获取位置精度
            var heading = geolocation.getHeading() || 0; //获取当前航向
            var speed = geolocation.getSpeed() || 0;  //获取当前速度
            var m = Date.now();
            addPosition(position, heading, m, speed); //添加定位点
            var coords = positions.getCoordinates();  //定位点的坐标
            var len = coords.length;
            if (len >= 2) {
                deltaMean = (coords[len - 1][3] - coords[0][3]) / (len - 1);
            }
            //更新信息面板的定位点相关信息
            $('#position').text(position[0].toFixed(2) + ', ' + position[1].toFixed(2));
            $('#positionaccuracy').text(accuracy + ' m');
            $('#heading').text(Math.round(radToDeg(heading)) + '&deg;');
            $('#speed').text((speed * 3.6).toFixed(1) + ' km/h');
            $('#delta').text(Math.round(deltaMean) + 'ms');
        });
        // 导航控件错误事件
        geolocation.on('error', function () {
            alert('geolocation error');
        });
        //添加定位点
        function addPosition(position, heading, m, speed) {
            var x = position[0];
            var y = position[1];
            var fCoords = positions.getCoordinates();
            var previous = fCoords[fCoords.length - 1];
            var prevHeading = previous && previous[2];
            if (prevHeading) {
                var headingDiff = heading - mod(prevHeading);
                // 强制变换角度（旋转角度变化不超过180度）
                if (Math.abs(headingDiff) > Math.PI) {
                    var sign = (headingDiff >= 0) ? 1 : -1;
                    headingDiff = -sign * (2 * Math.PI - Math.abs(headingDiff));
                }
                heading = prevHeading + headingDiff;
            }
            positions.appendCoordinate([x, y, heading, m]);
            //只保留20个最后的坐标
            positions.setCoordinates(positions.getCoordinates().slice(-20));
            if (heading && speed) {
                markerEl.src = '../../images/geolocation_marker_heading.png';
            } else {
                markerEl.src = '../../images/geolocation_marker.png';
            }
        }
        //弧度转度
        function radToDeg(rad) {
            return rad * 360 / (Math.PI * 2);
        }
        //度转弧度
        function degToRad(deg) {
            return deg * Math.PI * 2 / 360;
        }
        //负值模
        function mod(n) {
            return ((n % (2 * Math.PI)) + (2 * Math.PI)) % (2 * Math.PI);
        }

        var previousM = 0;
        // 地图渲染前改变中心与旋转角度
        map.on('precompose', function (map) {
            var frameState = map.frameState;
            if (frameState !== null) {
                // 利用地理位置变化采样周期平稳变换过渡
                var m = frameState.time - deltaMean * 1.5;
                m = Math.max(m, previousM);
                previousM = m;
                // 沿模拟轨迹设置当前定位点的position
                var c = positions.getCoordinateAtM(m, true);
                var view = frameState.viewState;
                if (c) {
                    view.center = getCenterWithHeading(c, -c[2], view.resolution);//设置中心点
                    view.rotation = -c[2];//设置地图旋转角度
                    marker.setPosition(c);//设置导航定位点的标注位置
                }
            }
            return true; 
        });

        // 重新计算中心点（ by putting the given coordinates at 3/4 from the top or  the screen）
        function getCenterWithHeading(position, rotation, resolution) {
            var size = map.getSize();
            var height = size[1];
            return [
              position[0] - Math.sin(rotation) * height * resolution * 1 / 4,
              position[1] + Math.cos(rotation) * height * resolution * 1 / 4
            ];
        }

    </script>
</body>
</html>
